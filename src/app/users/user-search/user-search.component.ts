import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';
import { FormGroup, FormBuilder, FormControl } from '@angular/forms';
import { Subscription } from 'rxjs';
import { UsersService } from '../cognito-identity-service-provider.service';

/**
 * Display a user search form with a resulting user list
 */
@Component({
  selector: 'app-user-search',
  templateUrl: './user-search.component.html',
  styleUrls: ['./user-search.component.scss']
})
export class UserSearchComponent implements OnInit, OnDestroy {
  // reference to set focus on this field
  @ViewChild('search', { static: true })
  search: any;

  /**
   * params generated by the search form to send to app-user-list
   */
  public params: any | null = null;

  /**
   * Types of searchs available
   */
  public comparators: any[] = [
    {
      value: '=',
      label: 'Equals'
    }, {
      value: '^=',
      label: 'Starts with'
    }
  ];

  public comparitorEnabled = true;

  /**
   * Default search parameters
   */
  private formDefaults: any = {
    search: '',
    attribute: 'email',
    type: '^='
  };

  public typeOptions: any[] = [];

  /**
   * Search form
   */
  public form: FormGroup = new FormBuilder().group({
    searchFormControl: new FormControl(this.formDefaults.search),
    attributeFormControl: new FormControl(this.formDefaults.attribute),
    comparitorFormControl: new FormControl(this.formDefaults.type)
  });

  /**
   * Reference to later unsubscribe
   */
  private attributeSubscription?: Subscription;

  /**
   * Based on selected attribute return the available options
   */
  public setSearchOptions(type: string) {
    // find the attribute
    const found = this.userService.metaData.find(element => element.value === type);
    if (found) {
      // group_name can only do equals - disable the starts with option
      if (found.value === 'group_name') {
        this.form.controls.comparitorFormControl.disable();
      } else {
        this.form.controls.comparitorFormControl.enable();
      }
      this.typeOptions = found.options;
      return found.Value;
    } else {
      this.form.controls.comparitorFormControl.enable();
      this.typeOptions = [];
    }
  }

  /**
   * Handle submiting
   */
  public submit() {
    let parameters = {};
    const searchData = this.form.getRawValue();
    const filter = searchData.attributeFormControl +
      ' ' +
      searchData.comparitorFormControl +
      ' ' +
      '\"' +
      searchData.searchFormControl +
      '\"';
    parameters = {
      Filter: filter
    };
    // pass parameters to the template
    this.params = parameters;
  }

  /**
   * Clear
   */
  public clear() {
    this.form.reset(
      {
        searchFormControl: this.formDefaults.search,
        attributeFormControl: this.formDefaults.attribute,
        comparitorFormControl: this.formDefaults.type
      }
    );
    this.submit();
  }

  constructor(public userService: UsersService) { }

  /**
   * Handles when the component is first created
   */
  ngOnInit() {
    // focus on search input
    setTimeout(() => {
      this.search.nativeElement.focus();
    }, 1);
    // perform default search
    this.submit();
    // setup a subscription to update the search options when the attribute updates
    this.attributeSubscription = this.form.controls.attributeFormControl.valueChanges.subscribe(
      type => {
        this.setSearchOptions(type);
      }
    );
    // load list of groups
    this.userService.updateGroups();

  }

  /**
   * Handle when the component is destroyed
   */
  public ngOnDestroy(): void {
    if (this.attributeSubscription) {
      this.attributeSubscription.unsubscribe();
    }
  }

}
